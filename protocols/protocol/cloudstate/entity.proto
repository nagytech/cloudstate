// Copyright 2019 Lightbend Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// gRPC definitions for Entity Discovery
//
//---
//
//`Interaction Specification`:
//
// - CloudState Proxy
//   - initiates a gRPC connection to the configured `user-function` hostname and port.
//     - TODO describe connection expectations (failure modes and interpretations thereof)
//   - invokes the User Function's `cloudstate.EntityDiscovery.discover` endpoint via the gRPC connection
//     - User Function's `cloudstate.EntityDiscovery.discover` implementation
//       - inspects the passed `ProxyInfo`
//       - TODO
//       - replies with a *valid* `EntitySpec`
//   - TODO
//  - TODO
syntax = "proto3";

package cloudstate;

// Any is used so that domain events defined according to the functions business domain can be embedded inside the protocol.
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/descriptor.proto";

option java_package = "io.cloudstate.protocol";

//Reply represents a Command processing successful reply.
//
//---
//
//`Specification`:
//
//  - A `Reply` is considered to be valid iff:
//    - `payload` TODO
message Reply {
    // The reply payload.
    google.protobuf.Any payload = 1;
}

//Forwards handling of this request to another entity.
//
//---
//
//`Specification`:
//
//  - A `Forward` is considered to be valid iff:
//    - `service_name` TODO
//    - `command_name` TODO
//    - `payload` TODO
message Forward {
    // The name of the service to forward to.
    string service_name = 1;
    // The name of the command.
    string command_name = 2;
    // The payload is the parameter value to the command.
    google.protobuf.Any payload = 3;
}

//ClientAction represents a side effect to be done after this command is handled.
//
//---
//
//`Specification`:
//
//  - A `ClientAction` is considered to be valid iff:
//    - `action` MUST be one of the following:
//      - `reply` MUST be a valid Reply containing a `payload` of the expected type.
//      - `forward` MUST be a valid Forward to a service whose command produces a ClientAction of the expected type.
//      - `failure` MUST be a valid Failure.
message ClientAction {
    // The type of action this ClientAction represents.
    oneof action {

        // Send a reply.
        Reply reply = 1;

        // Forward to another entity.
        Forward forward = 2;

        // Send a failure to the client
        Failure failure = 3;
    }
}

//SideEffect represents a side effect to be done after this command is handled.
//
//---
//
//`Specification`:
//
//  - A `SideEffect` is considered to be valid iff:
//    - `service_name` TODO
//    - `command_name` TODO
//    - `payload` TODO
//    - `synchronous` TODO
message SideEffect {

    // The name of the service to perform the side effect on.
    string service_name = 1;

    // The name of the command.
    string command_name = 2;

    // The payload of the command.
    google.protobuf.Any payload = 3;

    // Whether this side effect should be performed synchronously, ie, before the reply is eventually sent, or not.
    bool synchronous = 4;
}

//Command represents TODO
//
//---
//
//`Specification`:
//
//  - A `Command` is considered to be valid iff:
//    - `entity_id` TODO
//    - `id` TODO
//    - `name` TODO
//    - `payload` TODO
//    - `streamed` TODO
message Command {

    // The ID of the entity.
    string entity_id = 1;

    // A command id.
    // @exclude FIXME rename to command_id
    int64 id = 2;

    // Command name.
    string name = 3;

    // The command payload.
    google.protobuf.Any payload = 4;

    // Whether the command is streamed or not.
    bool streamed = 5;
}

//StreamCancelled TODO
//
//---
//
//`Specification`:
//
//  - A `StreamCancelled` is considered to be valid iff:
//    - `entity_id` TODO
//    - `id` TODO
message StreamCancelled {

    // The ID of the entity.
    string entity_id = 1;

    // The command id.
    // @exclude FIXME Rename to command_id
    int64 id = 2;
}

//Failure represents a Command processing failure reply.
//If this is returned, it will be translated into a gRPC unknown error with the corresponding description if supplied.
//
//---
//
//`Specification`:
//
//  - A `Failure` is considered to be valid iff:
//    - `command_id` TODO
//    - `description` TODO
message Failure {

    // The id of the command being replied to. Must match the input command.
    int64 command_id = 1;

    // A description of the error.
    string description = 2;
}

//EntitySpec TODO
//
//---
//
//`Specification`:
//
//  - An `EntitySpec` is considered to be valid iff:
//    - `proto` TODO
//    - `entities` TODO
//    - `service_info` TODO
message EntitySpec {
    // A Protobuf Descriptors.FileDescriptorSet of the Service to be proxied in proto serialized form.
    bytes proto = 1;

    // The entities being served.
    repeated Entity entities = 2;

    // Optional information about the service.
    ServiceInfo service_info = 3;
}

//ServiceInfo contains information about the service that the CloudState Proxy will proxy.
//All of the information in here is optional, it is intended to be used for debug purposes.
//
//---
//
//`Specification`:
//
//  - A `ServiceInfo` is considered to be valid iff:
//    - `service_name` TODO
//    - `service_version` TODO
//    - `service_runtime` TODO
//    - `support_library_name` TODO
//    - `support_library_version` TODO
message ServiceInfo {

    // The name of the service, eg, "shopping-cart".
    string service_name = 1;

    // The version of the service.
    string service_version = 2;

    // A description of the runtime for the service. Can be anything, but examples might be:
    // - node v10.15.2
    // - OpenJDK Runtime Environment 1.8.0_192-b12
    string service_runtime = 3;

    // If using a support library, the name of that library, eg "java-support".
    string support_library_name = 4;

    // The version of the support library being used.
    string support_library_version = 5;
}

//Entity represents TODO
//
//---
//
//`Specification`:
//
//  - An `Entity` is considered to be valid iff:
//    - `entity_type` is one of the following values:
//      - TODO
//      - TODO
//      - TODO
//    - `service_name` MUST be the name of a gRPC Service
//    - `persistence_id` MUST be TODO
message Entity {

    // The type of entity. By convention, this should be a fully qualified entity protocol grpc
    // service name, for example, cloudstate.eventsourced.EventSourced.
    string entity_type = 1;

    // The name of the service to load from the protobuf file.
    string service_name = 2;

    // The ID to namespace state by. How this is used depends on the type of entity, for example,
    // event sourced entities will prefix this to the persistence id.
    string persistence_id = 3;
}

//UserFunctionError contains information about a problem pretaining to erronous behavior of a UserFunction.
//
//---
//
//`Specification`:
//
//  - A `UserFunctionError` is considered to be valid iff:
//    - `message` MUST have length >= 1
message UserFunctionError {
    // A human-readable error message.
    string message = 1;
}

//ProxyInfo contains information about the CloudState PRoxy which is responsible for proxying a UserFunction.
//
//---
//
//`Specification`:
//
//  - A `ProxyInfo` is considered to be *valid* iff:
//    - `protocol_major_version` >= 0
//    - `protocol_minor_version` >= 0
//    - `proxy_name` TODO
//    - `proxy_version` TODO
//    - `supported_entity_types` is one of the following values:
//      - TODO
//      - TODO
//      - TODO
message ProxyInfo {
    // TODO
    int32 protocol_major_version = 1;
    // TODO
    int32 protocol_minor_version = 2;
    // TODO
    string proxy_name = 3;
    // TODO
    string proxy_version = 4;
    // TODO
    repeated string supported_entity_types = 5;
}

//The *EntityDiscovery* Service is the entrypoint for CloudState Proxies
//
//---
//
//`Specification`:
//
//  - A `User Function` *MUST* implement EntityDiscovery
//  - `discover`
//    - *MUST* be invoked with a *valid* `ProxyInfo`
//    - *MUST* return a *valid* `EntitySpec`
//    - *MUST* be *idempotent*
//    - *MAY* be called any number of times by its CloudState Proxy
//    - *MUST* yield a failure if the provided `ProxyInfo` is not deemed compatible with the User Function
//  - `reportError`
//    - *MUST* only be invoked to inform a User Function about violations of the CloudState Specification
//    - *MUST* only receive failures not originating from invoking `reportError`, since that would cause a crash-loop.
//    - implementations are *RECOMMENDED* to log the received errors, for debugging purposes.
service EntityDiscovery {

    // Lets a CloudState Proxy discover which `service` and `entities` a User Function implements.
    rpc discover(ProxyInfo) returns (EntitySpec) {}

    // Lets a CloudState Proxy inform a User Function about specification violations.
    rpc reportError(UserFunctionError) returns (google.protobuf.Empty) {}
}
